postgresql:
    primary:
        nodeSelector:
            node-role: database
        resources:
            requests:
                cpu: 250m
                memory: 512Mi
            limits:
                cpu: 1
                memory: 1024Mi
        persistence:
            existingClaim: postgresql

redis:
    fullnameOverride: redis
    master:
        nodeSelector:
            node-role: database
        resources:
            requests:
                cpu: 250m
                memory: 512Mi
            limits:
                cpu: 1
                memory: 1024Mi
        persistence:
            existingClaim: redis

image:
    pullPolicy: IfNotPresent
    repository: "docker.io"
    image: zimagi/knowledge-admin
    tag: "${KNOWLEDGE_ADMIN_TAG}"

pvc:
    claims:
        postgresql:
            backup: true
            storageClass: longhorn
            accessMode: ReadWriteOnce
            size: 10Gi
        redis:
            backup: true
            storageClass: longhorn
            accessMode: ReadWriteOnce
            size: 10Gi
        private-media:
            backup: true
            storageClass: longhorn
            accessMode: ReadWriteOnce
            size: 10Gi
        public-media:
            backup: true
            storageClass: longhorn
            accessMode: ReadWriteOnce
            size: 5Gi

services:
    ui:
        deployment:
            replicaCount: 1
            nodeSelector:
                node-role: ui
            resources:
                requests:
                    cpu: "50m"
                    memory: "1Gi"

        ingress:
            enabled: true
            className: nginx-ui
            hosts:
                - host: "${ADMIN_DOMAIN}"
            tls:
                - secretName: ui-cert

        annotations:
            configmap.reloader.stakater.com/reload: global,ui
            secret.reloader.stakater.com/reload: global
            cert-manager.io/cluster-issuer: cert-issuer

    api:
        deployment:
            replicaCount: 1
            nodeSelector:
                node-role: api
            resources:
                requests:
                    cpu: "50m"
                    memory: "1Gi"

        ingress:
            enabled: true
            className: nginx-api
            hosts:
                - host: "api.${ADMIN_DOMAIN}"
            tls:
                - secretName: api-cert

        annotations:
            configmap.reloader.stakater.com/reload: global,api
            secret.reloader.stakater.com/reload: global
            cert-manager.io/cluster-issuer: cert-issuer

    scheduler:
        deployment:
            replicaCount: 1
            nodeSelector:
                node-role: ops
            resources:
                requests:
                    cpu: "50m"
                    memory: "100Mi"

        annotations:
            configmap.reloader.stakater.com/reload: global,scheduler
            secret.reloader.stakater.com/reload: global

    worker:
        deployment:
            replicaCount: 1
            nodeSelector:
                node-role: ops
            resources:
                requests:
                    cpu: "50m"
                    memory: "1Gi"

        annotations:
            configmap.reloader.stakater.com/reload: global,worker
            secret.reloader.stakater.com/reload: global

    tasks:
        deployment:
            replicaCount: 1
            nodeSelector:
                node-role: admin
            resources:
                requests:
                    cpu: "50m"
                    memory: "250Mi"

        ingress:
            enabled: true
            className: nginx-ui
            hosts:
                - host: "admin-tasks.${OPERATIONS_DOMAIN}"
            tls:
                - secretName: tasks-cert

        annotations:
            cert-manager.io/cluster-issuer: cert-issuer
            nginx.ingress.kubernetes.io/auth-url: "https://${AUTH_DOMAIN}/oauth2/auth?allowed_emails=${oauth_access_groups.tasks}"
            nginx.ingress.kubernetes.io/auth-signin: "https://${AUTH_DOMAIN}/oauth2/start"
